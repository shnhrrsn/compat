{
  "self": [
    "javascript",
    "grammar"
  ],
  "type": "listing",
  "title": "Lexical grammar",
  "links": {
    "mdn": "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar",
    "github": "https://github.com/mdn/content/blob/main/files/en-us/web/javascript/reference/lexical_grammar/index.md"
  },
  "content": {
    "intro": {
      "id": "030641f5abd4a265db67a83aee4b1b20",
      "tree": {
        "type": "root",
        "children": [
          {
            "type": "element",
            "tagName": "p",
            "properties": {},
            "children": [
              {
                "type": "text",
                "value": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be "
              },
              {
                "type": "element",
                "tagName": "em",
                "properties": {},
                "children": [
                  {
                    "type": "text",
                    "value": "parsed"
                  }
                ]
              },
              {
                "type": "text",
                "value": " to a more structured representation. The initial step of parsing is called "
              },
              {
                "type": "element",
                "tagName": "a",
                "properties": {
                  "href": "https://en.wikipedia.org/wiki/Lexical_analysis"
                },
                "children": [
                  {
                    "type": "text",
                    "value": "lexical analysis"
                  }
                ]
              },
              {
                "type": "text",
                "value": ", in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include "
              },
              {
                "type": "element",
                "tagName": "a",
                "properties": {
                  "href": "#white_space"
                },
                "children": [
                  {
                    "type": "text",
                    "value": "white space"
                  }
                ]
              },
              {
                "type": "text",
                "value": " and "
              },
              {
                "type": "element",
                "tagName": "a",
                "properties": {
                  "href": "#comments"
                },
                "children": [
                  {
                    "type": "text",
                    "value": "comments"
                  }
                ]
              },
              {
                "type": "text",
                "value": ". The others, including "
              },
              {
                "type": "element",
                "tagName": "a",
                "properties": {
                  "href": "#identifiers"
                },
                "children": [
                  {
                    "type": "text",
                    "value": "identifiers"
                  }
                ]
              },
              {
                "type": "text",
                "value": ", "
              },
              {
                "type": "element",
                "tagName": "a",
                "properties": {
                  "href": "#keywords"
                },
                "children": [
                  {
                    "type": "text",
                    "value": "keywords"
                  }
                ]
              },
              {
                "type": "text",
                "value": ", "
              },
              {
                "type": "element",
                "tagName": "a",
                "properties": {
                  "href": "#literals"
                },
                "children": [
                  {
                    "type": "text",
                    "value": "literals"
                  }
                ]
              },
              {
                "type": "text",
                "value": ", and punctuators (mostly "
              },
              {
                "type": "element",
                "tagName": "a",
                "properties": {
                  "href": "/en-US/docs/Web/JavaScript/Reference/Operators"
                },
                "children": [
                  {
                    "type": "text",
                    "value": "operators"
                  }
                ]
              },
              {
                "type": "text",
                "value": "), will be used for further syntax analysis. "
              },
              {
                "type": "element",
                "tagName": "a",
                "properties": {
                  "href": "#line_terminators"
                },
                "children": [
                  {
                    "type": "text",
                    "value": "Line terminators"
                  }
                ]
              },
              {
                "type": "text",
                "value": " and multiline comments are also syntactically insignificant, but they guide the process for "
              },
              {
                "type": "element",
                "tagName": "a",
                "properties": {
                  "href": "#automatic_semicolon_insertion"
                },
                "children": [
                  {
                    "type": "text",
                    "value": "automatic semicolons insertion"
                  }
                ]
              },
              {
                "type": "text",
                "value": " to make certain invalid token sequences become valid."
              }
            ]
          }
        ],
        "data": {
          "quirksMode": false
        }
      }
    },
    "seeAlso": {
      "id": "c644ec8fcd87e97de06e9d604575eb3e",
      "tree": {
        "type": "root",
        "children": [
          {
            "type": "element",
            "tagName": "ul",
            "properties": {},
            "children": [
              {
                "type": "text",
                "value": "\n"
              },
              {
                "type": "element",
                "tagName": "li",
                "properties": {},
                "children": [
                  {
                    "type": "element",
                    "tagName": "a",
                    "properties": {
                      "href": "/en-US/docs/Web/JavaScript/Guide/Grammar_and_types"
                    },
                    "children": [
                      {
                        "type": "text",
                        "value": "Grammar and types"
                      }
                    ]
                  }
                ]
              },
              {
                "type": "text",
                "value": "\n"
              },
              {
                "type": "element",
                "tagName": "li",
                "properties": {},
                "children": [
                  {
                    "type": "element",
                    "tagName": "a",
                    "properties": {
                      "href": "https://whereswalden.com/2013/08/12/micro-feature-from-es6-now-in-firefox-aurora-and-nightly-binary-and-octal-numbers/"
                    },
                    "children": [
                      {
                        "type": "text",
                        "value": "Micro-feature from ES6, now in Firefox Aurora and Nightly: binary and octal numbers"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " by Jeff Walden (August 12, 2013)"
                  }
                ]
              },
              {
                "type": "text",
                "value": "\n"
              },
              {
                "type": "element",
                "tagName": "li",
                "properties": {},
                "children": [
                  {
                    "type": "element",
                    "tagName": "a",
                    "properties": {
                      "href": "https://mathiasbynens.be/notes/javascript-escapes"
                    },
                    "children": [
                      {
                        "type": "text",
                        "value": "JavaScript character escape sequences"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " by Mathias Bynens (December 21, 2011)"
                  }
                ]
              },
              {
                "type": "text",
                "value": "\n"
              }
            ]
          }
        ],
        "data": {
          "quirksMode": false
        }
      }
    }
  },
  "commit": {
    "sha": "71f4c5c5c53466fd346370db330fe0f02ac910d7",
    "date": "2023-05-01T00:11:17.000Z"
  },
  "children": [
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/array_literals"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/binary_numeric_literals"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/boolean_literals"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/decimal_numeric_literals"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/hashbang_comments"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/hexadecimal_escape_sequences"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/hexadecimal_numeric_literals"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/null_literal"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/numeric_separators"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/octal_numeric_literals"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/regular_expression_literals"
    },
    {
      "title": "grammar / shorthand_object_literals",
      "href": "/javascript/grammar/shorthand_object_literals"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/string_literals"
    },
    {
      "title": "Template literals (Template strings)",
      "href": "/javascript/grammar/template_literals"
    },
    {
      "title": "Trailing commas",
      "href": "/javascript/grammar/trailing_commas"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/unicode_escape_sequences"
    },
    {
      "title": "Lexical grammar",
      "href": "/javascript/grammar/unicode_point_escapes"
    }
  ]
}